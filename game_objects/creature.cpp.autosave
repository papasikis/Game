#include "creature.h"

QList<QDomNode> toQList(const QDomNodeList& list) {
    QList<QDomNode> result;
    for (int i=0; i<list.size(); i++)
        result.push_back(list.at(i));
    return result;
}

QPoint GraphicsCreature::sourcePos() const
{
    return sourcePos_;
}

void GraphicsCreature::setSourcePos(const QPoint &sourcePos)
{
    sourcePos_ = sourcePos;
    if (scene() != nullptr)
        scene()->update(mapRectToScene(boundingRect()));
}

int GraphicsCreature::frame() const
{
    return frame_;
}

void GraphicsCreature::setFrame(int value)
{
    setSourcePos(QPoint(value, sourcePos_.y()));
}

void GraphicsCreature::moveTo(const QPoint &node)
{
    
}

GraphicsCreature::GraphicsCreature(const QString& fileName) :
    QGraphicsObject()
{
    setInfo(fileName);
}

void GraphicsCreature::setInfo(const QString &fileName)
{
    QDomDocument domDoc;
    QFile file(":/new/prefix1/resources/isometric_hero/"+fileName);
    if(!file.open(QIODevice::ReadOnly)) {
        qDebug() << "Couldn't open " << fileName;
    }
    else {
        domDoc.setContent(&file);
    }
    file.close();

    QDomElement creature = domDoc.elementsByTagName("creature").at(0).toElement();
    auto itemGroups = toQList(creature.elementsByTagName("itemgroup"));

    tileSize_ = QSize(creature.attribute("tilewidth").toInt(),
                     creature.attribute("tileheight").toInt());
    center_ = QPoint(creature.attribute("centerX").toInt(),
                    creature.attribute("centerY").toInt());

    for (auto itemGroup: itemGroups) {
        auto images = toQList(itemGroup.toElement().elementsByTagName("image"));
        for (auto image: images) {
            auto pixmap = new QPixmap(":/new/prefix1/resources/isometric_hero/" +
                                      image.toElement().attribute("source"));
            if (pixmap != nullptr)
                source_[image.toElement().attribute("name")] = pixmap;
            else {
                qDebug() << "Image "+image.toElement().attribute("name")+
                            " does not exist!";
                exit(1);
            }
        }
    }

    auto domAnimations = toQList(creature.elementsByTagName("animation"));

    for (auto domAnimation: domAnimations) {
        auto animation = new QPropertyAnimation(this, "frame");

        auto start = domAnimation.toElement().attribute("firstid").toInt();
        auto end = start + domAnimation.toElement().attribute("count").toInt();

        animation->setStartValue(start);
        animation->setEndValue(end);

        animations_[domAnimation.toElement().attribute("type")] = animation;
    }

}

QRectF GraphicsCreature::boundingRect() const
{
    return QRectF(0, 0, tileSize_.width(), tileSize_.height());
}

void GraphicsCreature::paint(QPainter *painter, const QStyleOptionGraphicsItem *option,
                       QWidget *widget)
{
    for (auto pixmap: source_) {
        painter->drawPixmap(QPoint(0, 0), *pixmap,
                            QRect(sourcePos_.x()*tileSize_.width(),
                                  sourcePos_.y()*tileSize_.height(),
                                  boundingRect().width(), boundingRect().height()));
    }


//    for (auto item: this->collidingItems()) {
//        if (item->type() == MapObject::Type)
//        {
//            qDebug() << "hui";
//        }
//    }
}
